SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak,   value = $0800; # 2k stack
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $07FF, size = $0002;
    HEADER:   file = %O,               start = $0801, size = $000C;
    RAM1:     file = %O, define = yes, start = $080D, size = $7BF3;
    RAM:      file = %O, define = yes, start = $9000, size = $3C00 - __STACKSIZE__;
}
SEGMENTS {
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = RAM1,     type = ro;
    LOWCODE:  load = RAM1,     type = ro,                optional = yes;
    INIT:     load = RAM1,     type = ro,  define = yes, optional = yes;
    CODE:     load = RAM1,     type = ro;
    RODATA:   load = RAM1,     type = ro;
    DATA:     load = RAM1,     type = rw;
    ZPSAVE:   load = RAM,      type = bss, define = yes;
    BSS:      load = RAM,      type = bss, define = yes;
    ZEROPAGE: load = ZP,       type = zp;
}
FEATURES {
    CONDES: segment = INIT,
	    type    = constructor,
	    label   = __CONSTRUCTOR_TABLE__,
	    count   = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type    = destructor,
	    label   = __DESTRUCTOR_TABLE__,
	    count   = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type    = interruptor,
	    label   = __INTERRUPTOR_TABLE__,
	    count   = __INTERRUPTOR_COUNT__;
}
